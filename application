#!/usr/bin/env node
// Generated by CoffeeScript 1.6.2
var Boot, app, cluster, connect, connectDomain, controllers, core, cpus, crypto, debug, domain, error, express, fork, fs, http, log, port, utils, _, _i, _ref, _ref1, _ref2,
  _this = this;

_ = require('underscore')._;

http = require('http');

domain = require('domain');

connect = require('connect');

connectDomain = require('connect-domain');

express = require('express');

fs = require('fs');

cluster = require('cluster');

crypto = require('crypto');

_ref = require('require_tree').require_tree('./lib'), controllers = _ref.controllers, utils = _ref.utils, Boot = _ref.Boot;

cpus = require('os').cpus;

_ref1 = require('util'), debug = _ref1.debug, error = _ref1.error, log = _ref1.log;

port = process.env.PORT || 3000;

if (cluster.isMaster) {
  fork = function() {
    if (cluster) {
      return cluster.fork();
    }
  };
  for (core = _i = 1, _ref2 = cpus().length; 1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; core = 1 <= _ref2 ? ++_i : --_i) {
    fork();
  }
  cluster.on('exit', function(worker, code, signal) {
    return log("worker " + worker.process.pid + " died");
  });
  cluster.on('disconnect', function(worker) {
    return fork();
  });
} else {
  /*
    Create Server Instance and start listening for inbound connections
  */

  app = express();
  app.configure(function() {
    app.set('port', port);
    app.set('views', "" + __dirname + "/views");
    app.set('view engine', 'jade');
    app.use(express.favicon());
    app.use(express.logger('dev'));
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(express.errorHandler());
    app.use(connectDomain());
    return app.use(express['static']("" + __dirname + "/public"));
  });
  Boot(app, {
    verbose: true
  });
  http.createServer(app).listen(port);
  app.listen(port, (function() {
    return console.log("\u001b[32mExpress Service available at: \u001b[36mhttp://0.0.0.0:" + port + "\u001b[0m");
  }));
}
