#!/usr/bin/env node
// Generated by CoffeeScript 1.7.1
var Boot, app, bodyParser, cluster, config, core, cpus, debug, domain, error, errorhandler, express, expressDomain, favicon, fork, fs, host, log, logger, methodOverride, port, staticPath, _, _i, _ref, _ref1, _ref2;

_ = require('underscore')._;

domain = require('domain');

fs = require('fs');

cluster = require('cluster');

express = require('express');

staticPath = require('serve-static');

favicon = require('serve-favicon');

bodyParser = require('body-parser');

methodOverride = require('method-override');

errorhandler = require('errorhandler');

logger = require('express-logger');

expressDomain = require('express-domain-middleware');

cpus = require('os').cpus;

_ref = require('util'), debug = _ref.debug, error = _ref.error, log = _ref.log;

_ref1 = require('require_tree').require_tree('./lib'), config = _ref1.config, Boot = _ref1.Boot;

host = process.env.HOST || config.host || '0.0.0.0';

port = process.env.PORT || config.port || 3000;

if (cluster.isMaster) {
  fork = function() {
    if (cluster) {
      return cluster.fork();
    }
  };
  for (core = _i = 1, _ref2 = cpus().length; 1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; core = 1 <= _ref2 ? ++_i : --_i) {
    fork();
  }
  cluster.on('exit', function(worker, code, signal) {
    return log("worker " + worker.process.pid + " died");
  });
  cluster.on('disconnect', function(worker) {
    return fork();
  });
} else {
  app = express();
  app.set('port', port);
  app.set('views', "" + __dirname + "/views");
  app.set('view engine', config.view_engine);
  app.use(favicon("" + __dirname + "/public/favicon.ico"));
  app.use(logger({
    path: "" + __dirname + "/" + (config.env || 'development') + ".log"
  }));
  app.use(bodyParser());
  app.use(methodOverride());
  app.use(errorhandler());
  app.use(expressDomain);
  app.use(staticPath("" + __dirname + "/public"));
  Boot(app, {
    verbose: config.env.match(/^(development|test)+$/)
  });
  app.listen(port, host, (function() {
    return console.log("\u001b[32mExpress Service available at: \u001b[36mhttp://" + host + ":" + port + "\u001b[0m");
  }));
}
